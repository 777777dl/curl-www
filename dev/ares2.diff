diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/adig.c ./adig.c
--- /home/daniel/src/ares-1.1.1/adig.c	Fri May 18 22:59:51 2001
+++ ./adig.c	Tue Aug  5 16:10:54 2003
@@ -16,18 +16,24 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/time.h>
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <arpa/nameser.h>
+#include <unistd.h>
+#include <netdb.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
-#include <unistd.h>
 #include <errno.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_dns.h"
 
@@ -35,6 +41,11 @@
 #define	INADDR_NONE 0xffffffff
 #endif
 
+/* Mac OS X portability check */
+#ifndef T_SRV
+#define T_SRV 33 /* server selection */
+#endif
+
 extern int optind;
 extern char *optarg;
 
@@ -133,6 +144,12 @@
   struct timeval *tvp, tv;
   char *errmem;
 
+#ifdef WIN32
+  WORD wVersionRequested = MAKEWORD(1,1);
+  WSADATA wsaData;
+  WSAStartup(wVersionRequested, &wsaData);
+#endif  
+
   options.flags = ARES_FLAG_NOCHECKRESP;
   options.servers = NULL;
   options.nservers = 0;
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ahost.c ./ahost.c
--- /home/daniel/src/ares-1.1.1/ahost.c	Mon Apr  2 19:39:42 2001
+++ ./ahost.c	Fri Aug  1 01:29:18 2003
@@ -16,15 +16,20 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#else
 #include <sys/time.h>
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <netdb.h>
+#include <unistd.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_dns.h"
 
@@ -43,6 +48,12 @@
   struct timeval *tvp, tv;
   char *errmem;
   struct in_addr addr;
+
+#ifdef WIN32
+  WORD wVersionRequested = MAKEWORD(1,1);
+  WSADATA wsaData;
+  WSAStartup(wVersionRequested, &wsaData);
+#endif  
 
   if (argc == 0)
     usage();
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares.h ./ares.h
--- /home/daniel/src/ares-1.1.1/ares.h	Thu Sep 21 21:15:48 2000
+++ ./ares.h	Fri Aug  1 01:00:10 2003
@@ -19,7 +19,13 @@
 #define ARES__H
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include <winsock.h>
+#include <windows.h>
+#else
 #include <netinet/in.h>
+#endif
 
 #define ARES_SUCCESS		0
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares__close_sockets.c ./ares__close_sockets.c
--- /home/daniel/src/ares-1.1.1/ares__close_sockets.c	Thu Aug 13 20:06:22 1998
+++ ./ares__close_sockets.c	Fri Aug  1 01:04:16 2003
@@ -16,7 +16,10 @@
 static const char rcsid[] = "$Id$";
 
 #include <stdlib.h>
+#ifdef WIN32
+#else
 #include <unistd.h>
+#endif
 #include "ares.h"
 #include "ares_private.h"
 
@@ -43,12 +46,12 @@
   /* Close the TCP and UDP sockets. */
   if (server->tcp_socket != -1)
     {
-      close(server->tcp_socket);
+      closesocket(server->tcp_socket);
       server->tcp_socket = -1;
     }
   if (server->udp_socket != -1)
     {
-      close(server->udp_socket);
+      closesocket(server->udp_socket);
       server->udp_socket = -1;
     }
 }
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares__get_hostent.c ./ares__get_hostent.c
--- /home/daniel/src/ares-1.1.1/ares__get_hostent.c	Thu Feb 17 19:39:58 2000
+++ ./ares__get_hostent.c	Tue Aug  5 16:14:35 2003
@@ -16,14 +16,21 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <netdb.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
-#include <netdb.h>
+
 #include "ares.h"
 #include "ares_private.h"
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_expand_name.c ./ares_expand_name.c
--- /home/daniel/src/ares-1.1.1/ares_expand_name.c	Thu Feb 17 19:43:07 2000
+++ ./ares_expand_name.c	Tue Aug  5 16:11:11 2003
@@ -16,8 +16,14 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <netinet/in.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include "ares.h"
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_fds.c ./ares_fds.c
--- /home/daniel/src/ares-1.1.1/ares_fds.c	Fri Sep  4 23:09:30 1998
+++ ./ares_fds.c	Fri Aug  1 01:08:36 2003
@@ -16,7 +16,13 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+
+#else
 #include <sys/time.h>
+#endif
+
 #include "ares.h"
 #include "ares_private.h"
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_free_hostent.c ./ares_free_hostent.c
--- /home/daniel/src/ares-1.1.1/ares_free_hostent.c	Tue Sep 22 03:46:38 1998
+++ ./ares_free_hostent.c	Fri Aug  1 01:08:31 2003
@@ -16,7 +16,13 @@
 static const char rcsid[] = "$Id$";
 
 #include <stdlib.h>
+
+#ifdef WIN32
+
+#else
 #include <netdb.h>
+#endif
+
 #include "ares.h"
 
 void ares_free_hostent(struct hostent *host)
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_gethostbyaddr.c ./ares_gethostbyaddr.c
--- /home/daniel/src/ares-1.1.1/ares_gethostbyaddr.c	Thu Aug 13 20:06:29 1998
+++ ./ares_gethostbyaddr.c	Tue Aug  5 16:11:18 2003
@@ -16,13 +16,19 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_private.h"
 
@@ -135,6 +141,19 @@
 {
   FILE *fp;
   int status;
+
+#ifdef WIN32
+
+  char PATH_HOSTS[MAX_PATH];
+  if (IsNT) {
+    GetSystemDirectory(PATH_HOSTS, MAX_PATH);
+    strcat(PATH_HOSTS, PATH_HOSTS_NT);
+  } else {
+    GetWindowsDirectory(PATH_HOSTS, MAX_PATH);
+    strcat(PATH_HOSTS, PATH_HOSTS_9X);
+  }
+
+#endif
 
   fp = fopen(PATH_HOSTS, "r");
   if (!fp)
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_gethostbyname.c ./ares_gethostbyname.c
--- /home/daniel/src/ares-1.1.1/ares_gethostbyname.c	Sat Oct 23 21:28:13 1999
+++ ./ares_gethostbyname.c	Tue Aug  5 16:11:28 2003
@@ -16,15 +16,21 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_private.h"
 
@@ -208,6 +214,19 @@
   FILE *fp;
   char **alias;
   int status;
+
+#ifdef WIN32
+
+  char PATH_HOSTS[MAX_PATH];
+  if (IsNT) {
+    GetSystemDirectory(PATH_HOSTS, MAX_PATH);
+    strcat(PATH_HOSTS, PATH_HOSTS_NT);
+  } else {
+    GetWindowsDirectory(PATH_HOSTS, MAX_PATH);
+    strcat(PATH_HOSTS, PATH_HOSTS_9X);
+  }
+
+#endif
 
   fp = fopen(PATH_HOSTS, "r");
   if (!fp)
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_init.c ./ares_init.c
--- /home/daniel/src/ares-1.1.1/ares_init.c	Sat Oct 23 21:28:13 1999
+++ ./ares_init.c	Tue Aug  5 16:11:37 2003
@@ -16,19 +16,25 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
-#include <sys/time.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/param.h>
+#include <sys/time.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#include <unistd.h>
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
 #include <time.h>
-#include <unistd.h>
 #include <errno.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_private.h"
 
@@ -80,6 +86,7 @@
   channel->ndomains = -1;
   channel->nsort = -1;
   channel->lookups = NULL;
+  channel->queries = NULL;
 
   /* Initialize configuration by each of the four sources, from highest
    * precedence to lowest.
@@ -231,6 +238,113 @@
   struct server_state *servers = NULL;
   struct apattern *sortlist = NULL;
 
+#ifdef WIN32
+
+    /*
+  NameServer Registry:
+
+   On Windows 9X, the DNS server can be found in:
+HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\VxD\MSTCP\NameServer
+
+On Windows 2000, you can found it in:
+HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interf
+aces\{AdapterID}\NameServer
+   */
+
+  HKEY mykey;
+  HKEY subkey;
+  DWORD data_type;
+  DWORD bytes;
+  DWORD result;
+  DWORD index;
+  char name[MAX_PATH];
+  DWORD keysize = MAX_PATH;
+
+  status = ARES_EFILE;
+
+  if (IsNT) {
+    if (RegOpenKeyEx(
+            HKEY_LOCAL_MACHINE, WIN_NS_NT_KEY, 0,
+            KEY_READ | KEY_ENUMERATE_SUB_KEYS, &mykey
+        ) == ERROR_SUCCESS)
+    {
+        index = 0;
+        while ((result = RegEnumKeyEx(
+                mykey, index, name, &keysize, NULL, NULL, NULL, NULL
+                )) == ERROR_SUCCESS) {
+            index ++;
+            if ((result = RegOpenKeyEx(
+                    mykey, name, 0, KEY_READ, &subkey
+                    )) == ERROR_SUCCESS)
+            {
+                if ((result = RegQueryValueEx(
+                                subkey, NAMESERVER, NULL, &data_type,
+                                NULL, &bytes
+                            ) 
+                    ) == ERROR_SUCCESS ||
+                    result == ERROR_MORE_DATA)
+                {
+                    if (bytes) {
+                        line = (char *)malloc(bytes+1);
+                        if (RegQueryValueEx(
+                            subkey, NAMESERVER, NULL, &data_type,
+                            (unsigned char *)line, &bytes
+                            ) == ERROR_SUCCESS) {
+                            if (bytes > 1) {
+                                status = config_nameserver(&servers, &nservers, line);
+                            }
+                        }
+                        free(line);
+                    }
+                }
+
+
+            }
+            RegCloseKey(subkey);
+
+            keysize = MAX_PATH;
+        }
+    }
+    RegCloseKey(mykey);
+  } else {
+      if (RegOpenKeyEx(
+            HKEY_LOCAL_MACHINE, WIN_NS_9X, 0,
+            KEY_READ, &mykey
+          ) == ERROR_SUCCESS)
+      {
+        if ((result = RegQueryValueEx(
+                        mykey, NAMESERVER, NULL, &data_type,
+                        NULL, &bytes
+                      ) 
+            ) == ERROR_SUCCESS ||
+            result == ERROR_MORE_DATA)
+        {
+            if (bytes) {
+                line = (char *)malloc(bytes+1);
+                if (RegQueryValueEx(
+                    mykey, NAMESERVER, NULL, &data_type,
+                    (unsigned char *)line, &bytes
+                    ) == ERROR_SUCCESS) {
+                    status = config_nameserver(&servers, &nservers, line);
+                }
+                free(line);
+            }
+        }
+      } 
+      RegCloseKey(mykey);
+  }
+  
+  if (status != ARES_EFILE) {
+      /*
+      if (!channel->lookups) {
+          status = config_lookup(channel, "file bind");
+      }
+      */
+      status = ARES_EOF;
+  }
+
+#else
+
   fp = fopen(PATH_RESOLV_CONF, "r");
   if (!fp)
     return (errno == ENOENT) ? ARES_SUCCESS : ARES_EFILE;
@@ -256,11 +370,13 @@
   free(line);
   fclose(fp);
 
+#endif
+
   /* Handle errors. */
   if (status != ARES_EOF)
     {
-      free(servers);
-      free(sortlist);
+      if (servers != NULL) free(servers);
+      if (sortlist != NULL) free(sortlist);
       return status;
     }
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_mkquery.c ./ares_mkquery.c
--- /home/daniel/src/ares-1.1.1/ares_mkquery.c	Thu Sep 21 21:15:51 2000
+++ ./ares_mkquery.c	Tue Aug  5 16:11:47 2003
@@ -16,8 +16,14 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <netinet/in.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include <string.h>
 #include "ares.h"
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_parse_a_reply.c ./ares_parse_a_reply.c
--- /home/daniel/src/ares-1.1.1/ares_parse_a_reply.c	Mon Aug 17 23:45:51 1998
+++ ./ares_parse_a_reply.c	Tue Aug  5 16:11:55 2003
@@ -16,13 +16,19 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include <string.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_dns.h"
 #include "ares_private.h"
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_parse_ptr_reply.c ./ares_parse_ptr_reply.c
--- /home/daniel/src/ares-1.1.1/ares_parse_ptr_reply.c	Sat Oct 23 21:28:14 1999
+++ ./ares_parse_ptr_reply.c	Tue Aug  5 16:12:04 2003
@@ -16,12 +16,18 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/socket.h>
 #include <netinet/in.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include <string.h>
-#include <netdb.h>
 #include "ares.h"
 #include "ares_dns.h"
 #include "ares_private.h"
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_private.h ./ares_private.h
--- /home/daniel/src/ares-1.1.1/ares_private.h	Tue Sep 22 03:46:11 1998
+++ ./ares_private.h	Fri Aug  1 01:35:45 2003
@@ -17,7 +17,15 @@
 
 #include <stdio.h>
 #include <sys/types.h>
+
+#ifdef WIN32
+
+#else
 #include <netinet/in.h>
+/* We define closesocket() here so that we can use this function all over
+   the source code for closing sockets. */
+#define closesocket(x) close(x)
+#endif
 
 #define	DEFAULT_TIMEOUT		5
 #define DEFAULT_TRIES		4
@@ -25,11 +33,24 @@
 #define	INADDR_NONE 0xffffffff
 #endif
 
+#ifdef WIN32
+
+#define IsNT ((int)GetVersion()>0)
+#define WIN_NS_9X      "System\\CurrentControlSet\\Services\\VxD\\MSTCP"
+#define WIN_NS_NT_KEY  "System\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces"
+#define NAMESERVER     "NameServer"
+#define PATH_HOSTS_NT  "\\drivers\\etc\\hosts"
+#define PATH_HOSTS_9X  "\\hosts"
+          
+#else
+
 #define PATH_RESOLV_CONF	"/etc/resolv.conf"
 #ifdef ETC_INET
 #define PATH_HOSTS		"/etc/inet/hosts"
 #else
 #define PATH_HOSTS		"/etc/hosts"
+#endif
+
 #endif
 
 struct send_request {
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_process.c ./ares_process.c
--- /home/daniel/src/ares-1.1.1/ares_process.c	Sat Mar 17 17:43:36 2001
+++ ./ares_process.c	Tue Aug  5 16:12:12 2003
@@ -16,13 +16,20 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <sys/socket.h>
 #include <sys/uio.h>
 #include <netinet/in.h>
+#include <netdb.h>
 #include <arpa/nameser.h>
+#include <unistd.h>
+#endif
+
 #include <string.h>
 #include <stdlib.h>
-#include <unistd.h>
 #include <fcntl.h>
 #include <time.h>
 #include <errno.h>
@@ -84,10 +91,16 @@
       for (sendreq = server->qhead; sendreq; sendreq = sendreq->next)
 	n++;
 
+#ifdef WIN32
+      vec = NULL;
+#else
       /* Allocate iovecs so we can send all our data at once. */
       vec = malloc(n * sizeof(struct iovec));
+#endif
       if (vec)
 	{
+#ifdef WIN32
+#else
 	  /* Fill in the iovecs and send. */
 	  n = 0;
 	  for (sendreq = server->qhead; sendreq; sendreq = sendreq->next)
@@ -123,12 +136,15 @@
 		  break;
 		}
 	    }
+#endif
 	}
       else
 	{
 	  /* Can't allocate iovecs; just send the first request. */
 	  sendreq = server->qhead;
-	  count = write(server->tcp_socket, sendreq->data, sendreq->len);
+
+          count = send(server->tcp_socket, sendreq->data, sendreq->len, 0);
+
 	  if (count < 0)
 	    {
 	      handle_error(channel, i, now);
@@ -173,9 +189,9 @@
 	  /* We haven't yet read a length word, so read that (or
 	   * what's left to read of it).
 	   */
-	  count = read(server->tcp_socket,
-		       server->tcp_lenbuf + server->tcp_lenbuf_pos,
-		       2 - server->tcp_lenbuf_pos);
+          count = recv(server->tcp_socket,
+                       server->tcp_lenbuf + server->tcp_buffer_pos,
+                       2 - server->tcp_buffer_pos, 0);
 	  if (count <= 0)
 	    {
 	      handle_error(channel, i, now);
@@ -199,9 +215,9 @@
       else
 	{
 	  /* Read data into the allocated buffer. */
-	  count = read(server->tcp_socket,
+       	  count = recv(server->tcp_socket,
 		       server->tcp_buffer + server->tcp_buffer_pos,
-		       server->tcp_length - server->tcp_buffer_pos);
+		       server->tcp_length - server->tcp_buffer_pos, 0);
 	  if (count <= 0)
 	    {
 	      handle_error(channel, i, now);
@@ -442,6 +459,11 @@
     return -1;
 
   /* Set the socket non-blocking. */
+
+#ifdef WIN32
+  flags = 1;
+  ioctlsocket(s, FIONBIO, &flags);
+#else
   if (fcntl(s, F_GETFL, &flags) == -1)
     {
       close(s);
@@ -453,6 +475,7 @@
       close(s);
       return -1;
     }
+#endif
 
   /* Connect to the server. */
   memset(&sin, 0, sizeof(sin));
@@ -462,7 +485,7 @@
   if (connect(s, (struct sockaddr *) &sin, sizeof(sin)) == -1
       && errno != EINPROGRESS)
     {
-      close(s);
+      closesocket(s);
       return -1;
     }
 
@@ -487,7 +510,7 @@
   sin.sin_port = channel->udp_port;
   if (connect(s, (struct sockaddr *) &sin, sizeof(sin)) == -1)
     {
-      close(s);
+      closesocket(s);
       return -1;
     }
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_query.c ./ares_query.c
--- /home/daniel/src/ares-1.1.1/ares_query.c	Thu Sep 21 21:15:58 2000
+++ ./ares_query.c	Tue Aug  5 16:12:21 2003
@@ -16,8 +16,14 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <netinet/in.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include "ares.h"
 #include "ares_dns.h"
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_search.c ./ares_search.c
--- /home/daniel/src/ares-1.1.1/ares_search.c	Thu Sep 21 21:16:02 2000
+++ ./ares_search.c	Fri Aug  1 01:06:16 2003
@@ -19,6 +19,11 @@
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#endif
+
 #include "ares.h"
 #include "ares_private.h"
 
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_send.c ./ares_send.c
--- /home/daniel/src/ares-1.1.1/ares_send.c	Sat Oct 23 21:28:14 1999
+++ ./ares_send.c	Tue Aug  5 16:12:34 2003
@@ -16,8 +16,14 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+#include "nameser.h"
+#else
 #include <netinet/in.h>
 #include <arpa/nameser.h>
+#endif
+
 #include <stdlib.h>
 #include <string.h>
 #include <time.h>
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/ares_timeout.c ./ares_timeout.c
--- /home/daniel/src/ares-1.1.1/ares_timeout.c	Thu Aug 13 20:06:35 1998
+++ ./ares_timeout.c	Fri Aug  1 01:05:56 2003
@@ -16,7 +16,13 @@
 static const char rcsid[] = "$Id$";
 
 #include <sys/types.h>
+
+#ifdef WIN32
+
+#else
 #include <sys/time.h>
+#endif
+
 #include <time.h>
 #include "ares.h"
 #include "ares_private.h"
Common subdirectories: /home/daniel/src/ares-1.1.1/autom4te.cache and ./autom4te.cache
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/nameser.h ./nameser.h
--- /home/daniel/src/ares-1.1.1/nameser.h	Thu Jan  1 01:00:00 1970
+++ ./nameser.h	Fri Aug  1 01:39:44 2003
@@ -0,0 +1,205 @@
+/* Windows-only header file provided by liren@vivisimo.com to make his Windows
+   port build */
+
+#include <windows.h>
+#include <sys/types.h>
+
+#define MAXHOSTNAMELEN 256
+
+#define EINPROGRESS WSAEINPROGRESS
+
+/* Structure for scatter/gather I/O.  */
+struct iovec
+{
+    void *iov_base;     /* Pointer to data.  */
+    size_t iov_len;     /* Length of data.  */
+};
+
+#define getpid() _getpid()
+
+int strcasecmp(const char *a, const char *b);
+int gettimeofday(struct timeval *tv, struct timezone *tz);
+
+#define NS_CMPRSFLGS  0xc0  
+
+
+  /* Flag bits indicating name compression. */
+#define INDIR_MASK    NS_CMPRSFLGS
+
+typedef enum __ns_class {
+    ns_c_invalid = 0,       /* Cookie. */
+    ns_c_in = 1,            /* Internet. */
+    ns_c_2 = 2,             /* unallocated/unsupported. */
+    ns_c_chaos = 3,         /* MIT Chaos-net. */
+    ns_c_hs = 4,            /* MIT Hesiod. */
+    /* Query class values which do not appear in resource records */
+    ns_c_none = 254,        /* for prereq. sections in update requests */
+    ns_c_any = 255,         /* Wildcard match. */
+        ns_c_max = 65536
+} ns_class;
+
+#define C_IN           ns_c_in
+
+typedef enum __ns_type {
+    ns_t_invalid = 0,       /* Cookie. */
+    ns_t_a = 1,             /* Host address. */
+    ns_t_ns = 2,            /* Authoritative server. */
+    ns_t_md = 3,            /* Mail destination. */
+    ns_t_mf = 4,            /* Mail forwarder. */
+    ns_t_cname = 5,         /* Canonical name. */
+    ns_t_soa = 6,           /* Start of authority zone. */
+    ns_t_mb = 7,            /* Mailbox domain name. */
+    ns_t_mg = 8,            /* Mail group member. */
+    ns_t_mr = 9,            /* Mail rename name. */
+    ns_t_null = 10,         /* Null resource record. */
+    ns_t_wks = 11,          /* Well known service. */
+    ns_t_ptr = 12,          /* Domain name pointer. */
+    ns_t_hinfo = 13,        /* Host information. */
+    ns_t_minfo = 14,        /* Mailbox information. */
+    ns_t_mx = 15,           /* Mail routing information. */
+    ns_t_txt = 16,          /* Text strings. */
+    ns_t_rp = 17,           /* Responsible person. */
+    ns_t_afsdb = 18,        /* AFS cell database. */
+    ns_t_x25 = 19,          /* X_25 calling address. */
+    ns_t_isdn = 20,         /* ISDN calling address. */
+    ns_t_rt = 21,           /* Router. */
+    ns_t_nsap = 22,         /* NSAP address. */
+    ns_t_nsap_ptr = 23,     /* Reverse NSAP lookup (deprecated). */
+    ns_t_sig = 24,          /* Security signature. */
+    ns_t_key = 25,          /* Security key. */
+    ns_t_px = 26,           /* X.400 mail mapping. */
+    ns_t_gpos = 27,         /* Geographical position (withdrawn). */
+    ns_t_aaaa = 28,         /* Ip6 Address. */
+    ns_t_loc = 29,          /* Location Information. */
+    ns_t_nxt = 30,          /* Next domain (security). */
+    ns_t_eid = 31,          /* Endpoint identifier. */
+    ns_t_nimloc = 32,       /* Nimrod Locator. */
+    ns_t_srv = 33,          /* Server Selection. */
+    ns_t_atma = 34,         /* ATM Address */
+    ns_t_naptr = 35,        /* Naming Authority PoinTeR */
+    ns_t_kx = 36,           /* Key Exchange */
+    ns_t_cert = 37,         /* Certification record */
+    ns_t_a6 = 38,           /* IPv6 address (deprecates AAAA) */
+    ns_t_dname = 39,        /* Non-terminal DNAME (for IPv6) */
+    ns_t_sink = 40,         /* Kitchen sink (experimentatl) */
+    ns_t_opt = 41,          /* EDNS0 option (meta-RR) */
+    ns_t_tsig = 250,        /* Transaction signature. */
+    ns_t_ixfr = 251,        /* Incremental zone transfer. */
+    ns_t_axfr = 252,        /* Transfer zone of authority. */
+    ns_t_mailb = 253,       /* Transfer mailbox records. */
+    ns_t_maila = 254,       /* Transfer mail agent records. */
+    ns_t_any = 255,         /* Wildcard match. */
+    ns_t_zxfr = 256,        /* BIND-specific, nonstandard. */
+    ns_t_max = 65536
+} ns_type;
+
+#define T_PTR          ns_t_ptr
+#define T_A            ns_t_a
+
+
+#define NS_DEFAULTPORT        53      /* For both TCP and UDP. */
+#define NAMESERVER_PORT        NS_DEFAULTPORT
+
+#define NS_HFIXEDSZ   12      /* #/bytes of fixed data in header */
+#define HFIXEDSZ      NS_HFIXEDSZ
+
+#define NS_QFIXEDSZ   4       /* #/bytes of fixed data in query */
+#define QFIXEDSZ       NS_QFIXEDSZ
+
+typedef enum __ns_opcode {
+    ns_o_query = 0,         /* Standard query. */
+    ns_o_iquery = 1,        /* Inverse query (deprecated/unsupported). */
+    ns_o_status = 2,        /* Name server status query (unsupported). */
+                                /* Opcode 3 is undefined/reserved. */
+    ns_o_notify = 4,        /* Zone change notification. */
+    ns_o_update = 5,        /* Zone update message. */
+        ns_o_max = 6
+} ns_opcode;
+
+#define QUERY          ns_o_query
+
+#define NS_MAXLABEL   63 
+#define MAXLABEL       NS_MAXLABEL
+
+#define NS_RRFIXEDSZ  10      /* #/bytes of fixed data in r record */
+#define RRFIXEDSZ      NS_RRFIXEDSZ
+
+#define T_CNAME                ns_t_cname
+
+
+#define NS_PACKETSZ   512     /* maximum packet size */
+#define PACKETSZ       NS_PACKETSZ
+
+typedef enum __ns_rcode {
+    ns_r_noerror = 0,       /* No error occurred. */
+    ns_r_formerr = 1,       /* Format error. */
+    ns_r_servfail = 2,      /* Server failure. */
+    ns_r_nxdomain = 3,      /* Name error. */
+    ns_r_notimpl = 4,       /* Unimplemented. */
+    ns_r_refused = 5,       /* Operation refused. */
+    /* these are for BIND_UPDATE */
+    ns_r_yxdomain = 6,      /* Name exists */
+    ns_r_yxrrset = 7,       /* RRset exists */
+    ns_r_nxrrset = 8,       /* RRset does not exist */
+    ns_r_notauth = 9,       /* Not authoritative for zone */
+    ns_r_notzone = 10,      /* Zone of record different from zone section */
+    ns_r_max = 11,
+    /* The following are TSIG extended errors */
+    ns_r_badsig = 16,
+    ns_r_badkey = 17,
+        ns_r_badtime = 18
+} ns_rcode;
+
+#define SERVFAIL       ns_r_servfail
+#define NOTIMP         ns_r_notimpl
+#define REFUSED        ns_r_refused
+#define NOERROR                ns_r_noerror
+#define FORMERR                ns_r_formerr
+#define NXDOMAIN       ns_r_nxdomain
+
+#define C_CHAOS                ns_c_chaos
+#define C_HS            ns_c_hs
+#define C_NONE          ns_c_none
+#define C_ANY           ns_c_any
+
+#define T_A             ns_t_a
+#define T_NS            ns_t_ns
+#define T_MD            ns_t_md
+#define T_MF            ns_t_mf
+#define T_CNAME         ns_t_cname
+#define T_SOA           ns_t_soa
+#define T_MB            ns_t_mb
+#define T_MG            ns_t_mg
+#define T_MR            ns_t_mr
+#define T_NULL          ns_t_null
+#define T_WKS           ns_t_wks
+#define T_PTR           ns_t_ptr
+#define T_HINFO         ns_t_hinfo
+#define T_MINFO         ns_t_minfo
+#define T_MX            ns_t_mx
+#define T_TXT           ns_t_txt
+#define T_RP            ns_t_rp
+#define T_AFSDB         ns_t_afsdb
+#define T_X25           ns_t_x25
+#define T_ISDN          ns_t_isdn
+#define T_RT            ns_t_rt
+#define T_NSAP          ns_t_nsap
+#define T_NSAP_PTR      ns_t_nsap_ptr
+#define T_SIG           ns_t_sig
+#define T_KEY           ns_t_key
+#define T_PX            ns_t_px
+#define T_GPOS          ns_t_gpos
+#define T_AAAA          ns_t_aaaa
+#define T_LOC           ns_t_loc
+#define T_NXT           ns_t_nxt
+#define T_EID           ns_t_eid
+#define T_NIMLOC        ns_t_nimloc
+#define T_SRV           ns_t_srv
+#define T_ATMA          ns_t_atma
+#define T_NAPTR         ns_t_naptr
+#define T_TSIG          ns_t_tsig
+#define T_IXFR          ns_t_ixfr
+#define T_AXFR          ns_t_axfr
+#define T_MAILB         ns_t_mailb
+#define T_MAILA         ns_t_maila
+#define T_ANY           ns_t_any
Common subdirectories: /home/daniel/src/ares-1.1.1/vc and ./vc
diff -N -X excludes -ubB /home/daniel/src/ares-1.1.1/windows_port.c ./windows_port.c
--- /home/daniel/src/ares-1.1.1/windows_port.c	Thu Jan  1 01:00:00 1970
+++ ./windows_port.c	Tue Aug  5 16:15:05 2003
@@ -0,0 +1,61 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <string.h>
+
+#include "nameser.h"
+
+int
+strncasecmp(const char *a, const char *b, size_t n)
+{
+    size_t i;
+
+    for (i = 0; i < n; i++) {
+        int c1 = isupper(a[i]) ? tolower(a[i]) : a[i];
+        int c2 = isupper(b[i]) ? tolower(b[i]) : b[i];
+        if (c1 != c2) return c1-c2;
+    }
+    return 0;
+}
+
+int
+strcasecmp(const char *a, const char *b)
+{
+    return strncasecmp(a, b, strlen(a)+1);
+}
+
+int 
+gettimeofday(struct timeval *tv, struct timezone *tz) 
+{
+    FILETIME        ft;
+    LARGE_INTEGER   li;
+    __int64         t;
+    static int      tzflag;
+
+    if (tv)
+    {
+        GetSystemTimeAsFileTime(&ft);
+        li.LowPart  = ft.dwLowDateTime;
+        li.HighPart = ft.dwHighDateTime;
+        t  = li.QuadPart;       /* In 100-nanosecond intervals */
+        //t -= EPOCHFILETIME;     /* Offset to the Epoch time */
+        t /= 10;                /* In microseconds */
+        tv->tv_sec  = (long)(t / 1000000);
+        tv->tv_usec = (long)(t % 1000000);
+    }
+
+#if 0
+    if (tz)
+    {
+        if (!tzflag)
+        {
+            _tzset();
+            tzflag++;
+        }
+        tz->tz_minuteswest = _timezone / 60;
+        tz->tz_dsttime = _daylight;
+    }
+#endif
+
+    return 0;
+}
