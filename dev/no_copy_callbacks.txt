How we could add callback support for reading/writing with less callbacks...

UPLOAD with less copying
------------------------
 It could possibly look like this:
 
    size_t read_file(void *clientp, size_t size, void **bufptr);
 
 An application would then:
 
  1 - use the clientp for whatever purpose it feels like
 
  2 - set the *bufptr to point to the start of the buffer piece to upload next
 
  3 - return 'size' or less bytes (the reason for this maximum amount is
      merely for blocking purposes, so that we don't write to write X*1000
      bytes to a socket when we only do X*10 bytes per second, as that would
      make a very long block with bad a lousy progress meter as result among
      other things)


DOWNLOAD with less copying
--------------------------

  /* tell libcurl what function to call when data has been delivered */
  curl_easy_setopt(CURLOPT_NOCOPY_DOWNLOAD_FUNCTION, my_write_callback);

  /* tell libcurl what function to call to get a buffer to store data in */
  curl_easy_setopt(CURLOPT_NOCOPY_GETBUF_FUNCTION, my_here_you_store_here);

  /* This function gets called before libcurl reads any data from the
     network, this function lets libcurl know where we want the data stored.
    */
  int my_here_you_store_here(void *clientp, size_t *sizep, void **bufp)
  {
    struct mystruct *my=clientp; /* application specific stuff */

    /* set the maximum amount of data we can read into this chunk */
    *sizep = my->size_left_to_fill_with_data;

    /* tell libcurl where we want the data stored */
    *bufp  = my->pointer_to_where_we_want_data_filled_in;

    return OK_YOU_LIBCURL_YOU_MAY_PROCEDE_AND_DOWNLOAD_NOW;
  }

  /* This function get called when libcurl has written data to that place
     we previously told it to store data at. */
  int my_write_callback(void *clientp, size_t bytes_written, void *bufp)
  {
    struct mystruct *my=clientp;

    /* We advance our pointer where we want the next chunk of data */
    my->pointer_to_where_we_want_data_filled_in += bytes_written;

    /* We decrease the amount of data we have left in the buffer */
    my->size_left_to_fill_with_data -= bytes_written;

    return OK_WE_GOT_IT_NOW_CONTINUE;
  }
